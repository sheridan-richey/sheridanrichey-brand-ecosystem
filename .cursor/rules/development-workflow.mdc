# Development Workflow

## Technology Stack
- **Framework**: Next.js 13+ with App Router
- **Language**: TypeScript (strict mode)
- **Styling**: Tailwind CSS
- **Content**: MDX with Contentlayer
- **Testing**: Playwright for E2E tests
- **Deployment**: Vercel with GitHub integration

## Development Environment Setup
1. **Install dependencies**: `npm install` (root) then `cd website && npm install`
2. **Environment variables**: Copy [website/.env.example](mdc:website/.env.example) to `.env.local`
3. **Start development**: `npm run dev` in [website/](mdc:website/) directory
4. **Open in Cursor**: `cursor .` for AI-powered development

## File Structure Standards
- **Pages**: [website/app/](mdc:website/app/) - Next.js App Router pages
- **Components**: [website/components/](mdc:website/components/) - Reusable React components
- **Blog Posts**: [website/posts/](mdc:website/posts/) - MDX files with frontmatter
- **Configuration**: [website/next.config.js](mdc:website/next.config.js), [website/contentlayer.config.ts](mdc:website/contentlayer.config.ts)

## Component Development
- **Use functional components** with React hooks
- **TypeScript strict mode** - proper type definitions required
- **Tailwind CSS** for styling - follow responsive design principles
- **Component naming**: PascalCase (e.g., `ZagMatrixSidebar.tsx`)
- **File naming**: kebab-case (e.g., `zag-matrix-page.tsx`)

## ZAG Matrix Integration
- **Use shared components**: [website/components/ZagMatrixOverview.tsx](mdc:website/components/ZagMatrixOverview.tsx)
- **Consistent branding**: Follow established color scheme and typography
- **Framework alignment**: All features should connect to ZEN, ACT, GEM pillars

## Testing Requirements
- **E2E tests**: [tests/e2e/](mdc:tests/e2e/) with Playwright
- **Critical user flows**: Test main navigation, blog posts, contact forms
- **Responsive design**: Test on multiple screen sizes
- **Accessibility**: Ensure WCAG compliance
- **Run tests**: `npm run test:e2e` from root directory

## Code Quality Standards
- **Self-documenting code** with clear comments
- **JSDoc comments** for complex functions
- **Consistent formatting** - use Prettier and ESLint
- **Performance considerations** - optimize images, minimize bundle size
- **Security best practices** - validate inputs, secure API endpoints

## Git Workflow
- **Branch strategy**: feature/[name], fix/[name], docs/[name]
- **Commit messages**: `type(scope): description` format
- **PR process**: Create feature branch → focused changes → descriptive PR → review → merge
- **No direct pushes to main** - all changes through PRs

## Deployment Process
- **Automatic deployment** via GitHub integration
- **Production URL**: https://sheridanrichey.com
- **Preview URLs**: Generated automatically for each PR
- **Environment variables**: Managed via Vercel dashboard
- **No manual deployment** required - push to main triggers deployment

## Common Commands
```bash
# Development
cd website && npm run dev

# Testing
npm run test:e2e

# Build
cd website && npm run build

# Type checking
cd website && npm run type-check

# Linting
cd website && npm run lint
```

## Troubleshooting
- **Port conflicts**: Use `npx kill-port 3000`
- **Build errors**: Clear cache with `rm -rf node_modules package-lock.json && npm install`
- **Git issues**: Reset with `git fetch origin && git reset --hard origin/main`
- **MDX issues**: Ensure LF line endings, not CRLF
description:
globs:
alwaysApply: false
---
