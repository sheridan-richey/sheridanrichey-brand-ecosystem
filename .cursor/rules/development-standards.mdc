# Development Standards

## Next.js App Router Structure
Follow the established patterns in the website directory:
- [Main Layout](mdc:website/app/layout.tsx) - Root layout with metadata and global styles
- [Homepage](mdc:website/app/page.tsx) - Landing page with hero section
- [ZAG Matrix Page](mdc:website/app/zag-matrix/page.tsx) - Core framework presentation
- [Newsletter Page](mdc:website/app/newsletter/page.tsx) - Email signup functionality

## Component Standards
- Use TypeScript for all components
- Follow the component structure in [components directory](mdc:website/components/)
- Implement responsive design with Tailwind CSS
- Use semantic HTML and accessibility best practices
- Include proper error handling and loading states

## Key Components Reference
- [HeroSection](mdc:website/components/HeroSection.tsx) - Main landing component
- [ZagMatrixSidebar](mdc:website/components/ZagMatrixSidebar.tsx) - Framework navigation
- [ContactForm](mdc:website/components/ContactForm.tsx) - User interaction component
- [BlogCard](mdc:website/components/BlogCard.tsx) - Content presentation

## Styling Guidelines
- Use Tailwind CSS utility classes
- Follow the design system in [globals.css](mdc:website/app/globals.css)
- Maintain ZAG Matrix color scheme and branding
- Ensure mobile-first responsive design
- Use consistent spacing and typography

## API Integration
- Follow the pattern in [newsletter API](mdc:website/app/api/newsletter/route.ts)
- Implement proper error handling and validation
- Use TypeScript interfaces for type safety
- Include appropriate HTTP status codes

## Testing Infrastructure
- Use Playwright for end-to-end testing
- Follow the configuration in [playwright.config.js](mdc:playwright.config.js)
- Maintain test results in [test-results directory](mdc:test-results/)
- Use page object pattern for maintainable tests

## E2E Test Structure
Follow the established patterns in the [tests/e2e directory](mdc:tests/e2e/):

### Test Files
- [Homepage Tests](mdc:tests/e2e/homepage.spec.js) - Landing page functionality
- [Blog Tests](mdc:tests/e2e/blog.spec.js) - Blog page and content
- [Contact Tests](mdc:tests/e2e/contact.spec.js) - Contact form functionality
- [Newsletter Tests](mdc:tests/e2e/newsletter.spec.js) - Email signup process
- [ZAG Matrix Tests](mdc:tests/e2e/zag-matrix.spec.js) - Framework page
- [Links Tests](mdc:tests/e2e/links.spec.js) - Navigation and link validation

### Page Objects
- [BlogPage](mdc:tests/e2e/pageObjects/BlogPage.js) - Blog page interactions
- [NewsletterPage](mdc:tests/e2e/pageObjects/NewsletterPage.js) - Newsletter functionality
- [HomePage](mdc:tests/e2e/pageObjects/HomePage.js) - Homepage interactions
- [ContactPage](mdc:tests/e2e/pageObjects/ContactPage.js) - Contact form handling

## Testing Standards
- Test all critical user flows
- Validate responsive design across screen sizes
- Ensure accessibility compliance
- Test form submissions and API integrations
- Verify navigation and link functionality
- Check for proper error handling

## Deployment Infrastructure
- Use Vercel for hosting and deployment
- Follow the configuration in [vercel.json](mdc:vercel.json)
- Use the deployment script in [deploy.ps1](mdc:website/deploy.ps1)
- Maintain environment variables securely

## Configuration Files
- [Next.js Config](mdc:website/next.config.js) - Next.js specific settings
- [Tailwind Config](mdc:website/tailwind.config.js) - Styling configuration
- [TypeScript Config](mdc:website/tsconfig.json) - TypeScript settings
- [PostCSS Config](mdc:website/postcss.config.js) - CSS processing

## Performance & Security
- Optimize images and assets for web delivery
- Implement proper caching strategies
- Use CDN for static assets
- Monitor Core Web Vitals and performance metrics
- Validate all user inputs and implement proper authentication
- Use HTTPS for all communications

## Continuous Integration
- Run tests on every deployment
- Generate test reports for review
- Maintain test coverage metrics
- Automate test result notifications
- Include visual regression testing in CI/CD pipeline
description:
globs:
alwaysApply: false
---
